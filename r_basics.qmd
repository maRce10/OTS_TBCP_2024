---
title: "R basics"
---

```{r,echo=FALSE,message=FALSE}

options("digits"=5)
options("digits.secs"=3)

# options to customize chunk outputs
knitr::opts_chunk$set(
  message = FALSE
 )

```


::: {.alert .alert-info}
# Objectives {.unnumbered .unlisted}

-   Get familiar with the basic blocks used in R programming

-   Know the main sources of standardized documentation in R
:::

 

# What is R?

-   A [free Domain Specific Language (DSL)](https://en.wikipedia.org/wiki/Domain-specific_language) for statistics and data analysis
-   A collection of over 18695 packages (as of Sep-21-2022)
-   A large and active community in both industry and academia
-   A way to "speak directly" to your computer

Historically:

-   Based on the S programming language
-   Around 20 years old (the lineage dates back to 1975 - almost 40 years ago)

<img src="images/Rinterf.jpeg" alt="R" height="600" width="800"/>

 

# Rstudio

Integrated Development Environment (IDE) for R. It includes:

-   A console
-   Syntax-highlighting editor that supports direct code execution
-   Tools for plotting, history, debugging, and workspace management

<img src="images/Rstudio.jpeg" alt="R" height="500" width="800"/>

 

------------------------------------------------------------------------

# Elements of the R language

-   **Vectors**
-   **Lists**
-   **Matrices**
-   **Data frames**
-   **Functions (including operators)**
-   Tables
-   Attributes
-   ~~Arrays~~
-   ~~Environments~~

 

# Basic structure of data representation

The basic data structure in R is the vector. There are two basic types of vectors: atomic vectors and lists.

They have three common properties:

-   Type, `typeof()` (class/mode \~)
-   Length, `length()` (number of elements)
-   Attributes, `attributes()` (metadata)

They differ in the types of their elements: all elements of an atomic vector must be of the same type, whereas elements of a list can have different types

```{r, echo=FALSE}
d <- data.frame(
 	c("Atomic vector", "List"),
	c("Matrix", "Data frame"),
c("Array", ""))


d <- t(d)

colnames(d) <-c("Homogeneous",	"Heterogeneous")

rownames(d) <-c("1d",	"2d", "nd")

as.data.frame(d)

```

 

Individual numbers or strings are actually vectors of length one.

 

## Atomic vectors

Types of atomic vectors:

-   Logical [(boolean)](https://en.wikipedia.org/wiki/Boolean)
-   Integer
-   Numeric (double)
-   Characters
-   Factors

Vectors are constructed using the `c()` function:

```{r,collapse=TRUE}

x <- 1
x1 <- c(1)

all.equal(x, x1)

class(x)

y <- "something"

class(y)

z <- TRUE

class(z)

q <- factor(1)

class(q)

```

 

Vectors can only contain elements of the same type. Different types of elements will be coerced to the most flexible type:

```{r, collapse=TRUE}

v <- c(10, 11, 12, 13)

class(v)

typeof(v)

y <- c("a", "b")

class(y)


x <- c(1,2,3, "a")

x

class(x)

```

 

Missing values are specified with NA, which is a logical vector of length 1. NA will always be coerced to the correct type if used within `c()`:

```{r, collapse=TRUE}

v <- c(10, 11, 12, 13, NA)

class(v)

v <- c("a", "b", NA)

class(v)

```

 

## Lists

Can contain objects of different classes and sizes. Lists are constructed with `list()`:

```{r}

l <- list("a", 1, FALSE)

l

class(l)

str(l)

```

They can actually be seen as bins where any other type of object can be put:

```{r}

l <- list(c("a", "b"), c(1, 2, 3, 4), c(FALSE, TRUE, FALSE))

str(l)

l2 <- list(l, l)

str(l2)

```

 

## Naming elements

Vectors can be named in three ways:

-   When creating it: `x <- c(a = 1, b = 2, c = 3)`.
-   When modifying an existing vector in place: `x <- 1:3`; `names(x) <- c("a", "b", "c")` Or: `x <- 1:3`; `names(x)[[1]] <- c("a")`
-   Creating a modified copy of a vector: `x <- setNames(1:3, c("a", "b", "c"))`

```{r}
y <- c(a = 1, 2, 3)

names(y)

v <- c(1, 2, 3)

names(v) <- c('a')

names(v)

z <- setNames(1:3, c("a", "b", "c"))

names(z)

```

 

## Factors

Attributes are used to define factors. A factor is a vector that can only contain predefined values and is used to store categorical data.

Factors are constructed on integer vectors using two attributes:

-   class "factor": makes them behave differently from normal character vectors
-   levels: define the set of allowed values

```{r}

x <- factor(c("a", "b", "b", "a"))
x

levels(x)


str(x)

```

 

Factors look like character vectors, but they are actually integers:

```{r}

x <- factor(c("a", "b", "b", "a"))

c(x)
```

 

## Matrices

All elements are of the same type:

```{r}
m <- matrix(c(1, 2, 3, 11, 12, 13), nrow = 2)

dim(m)

m

class(m)


m <- matrix(c(1, 2, 3, 11, 12, "13"), nrow = 2)
m


```

 

## Data frames

Special case of lists. Can contain elements of different types:

```{r}

m <-
  data.frame(
    ID = c("a", "b", "c", "d", "e"),
    size = c(1, 2, 3, 4, 5),
    observed = c(FALSE, TRUE, FALSE, FALSE, FALSE)
  )

dim(m)

m

class(m)

is.data.frame(m)

is.list(m)

str(m)

```

 

But vectors must have the same length:

```{r, error = TRUE}

m <-
  data.frame(
    ID = c("a", "b", "c", "d", "e"),
    size = c(1

, 2, 3, 4, 5, 6),
    observed = c(FALSE, TRUE, FALSE, FALSE, FALSE)
  )

```

 

::: {.alert .alert-info}

# Exercise 1

 

-   Create a numeric vector with 8 elements containing positive and negative numbers

-   Create a character vector with the names of the stations that will be visited during the course

-   Add an NA to the above point vector

-   Create a numeric matrix with 3 columns and 3 rows

-   Create a character matrix with 4 columns and 3 rows

-   What type of object is 'iris' and what are its dimensions?

-   Create a data frame with a numeric column, a character column, and a column with factors
:::

------------------------------------------------------------------------

# Extracting subsets using indexing

Elements within objects can be called by indexing. To subset a vector simply call the object's position using square brackets:

```{r}

x <- c(1, 3, 4, 10, 15, 20, 50, 1, 6)

x[1]

x[2]

x[2:3]

x[c(1,3)]

```

 

Elements can be removed in the same way:

```{r}


x[-1]

x[-c(1,3)]

```

 

Matrices and data frames require 2 indices `[row, column]`:

```{r}

m <- matrix(c(1, 2, 3, 11, 12, 13), nrow = 2)

m[1, ]

m[, 1]

m[1, 1]

m[-1, ]

m[, -1]

m[-1, -1]


df <- data.frame(
  family = c("Psittacidae", "Trochilidae", "Psittacidae"), 
  genus = c("Amazona", "Phaethornis", "Ara"), 
	species = c("aestiva", "philippii", "ararauna")
  )

df

df[1, ]

df[, 1]

df[1, 1]

df[-1, ]

df[, -1]

df[-1, -1]

df[,"family"]

df[,c("family", "genus")]

```

 

Lists require 1 index between double brackets `[[index]]`:

```{r}

l <- list(c("a", "b"),
          c(1, 2, 3),
          c(FALSE, TRUE, FALSE, FALSE))

l[[1]]

l[[3]]

```

 

Elements within lists can also be subset in the same line of code:

```{r}

l[[1]][1:2]

l[[3]][2]

```

 

# Exploring objects

```{r, eval = TRUE}

str(df)

names(df)

dim(df)

nrow(df)

ncol(df)

head(df)

tail(df)

table(df$genus)

class(df)

```

```{r, eval = F}

View(df)

```

 

------------------------------------------------------------------------

 

# Functions

All functions are created with the `function()` function and follow the same structure:

<img src="images/function.png" alt="R" height="350" width="900"/>

<font size="2">\* Modified from <i>Grolemund 2014</i></font>  

R comes with many functions that you can use to perform sophisticated tasks:

```{r}
# built in functions
bi <- builtins()

length(bi)

set.seed(22)
sample(bi, 10)

```

 

Operators are functions:

```{r}

1 + 1


'+'(1, 1)

2 * 3


'*'(2, 3)


```

 

## Most used operators

Arithmetic operators:

```{r, echo=F}
d <- data.frame(
c("+" , "addition"),
c("-", 	"subtraction"),
c("*" ,	"multiplication"),
c("/",	"division"),
c("^ or **",	"exponentiation"))


d <- t(d)

colnames(d) <- c("Operator      ", "Description  ")

knitr::kable(d, row.names = F, escape = FALSE) |>
  kableExtra::kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = FALSE, font_size = 18)

```

 

```{r}

1 - 2

1 + 2

2 ^ 2

2 ** 2

2:3 %in% 2:4

```

 

Logical operators:

```{r, echo=F, results='asis'}
d <- matrix(
c("<", "less than", "<=", "less than or equal to",">", "greater than", ">=",	"greater than or equal to", "==", "exactly equal to", "!=",	"not equal to", "!x",	"not x", "x | y", "x OR y", "x & y", "x AND y","x %in% y", "match"), ncol = 2, byrow = TRUE)



d <- as.data.frame(d)

names(d) <- c("Operator      ", "Description  ")

knitr::kable(d, row.names = F,  booktabs = TRUE, escape = TRUE) |>
 kableExtra::kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = FALSE, font_size = 18)

```

 

```{r}

1 < 2 

1 > 2 

1 <= 2 

1 == 2

1 != 2

1 > 2 

5 %in% 1:6

5 %in% 1:4
```

::: {.alert .alert-info}

# Exercise 2

 

-   Use the sample data `iris` to create a subset of data with only observations of the species `setosa`

-   Now create a subset of data containing observations of both "setosa" and "versicolor"

-   Also with `iris` create a subset of data with observations for which `iris$Sepal.length` is greater than 6

-   How many observations have a sepal length greater than 6?
:::

 

Most functions are vectorized:

```{r, eval=F}

1:6 * 1:6

```

<img src="images/vectorize.png" alt="R" height="350" width="900"/>

<font size="2">\* Modified from <i>Grolemund & Wickham 2017</i></font>

 

```{r, echo=F}

1:6 * 1:6
```

```{r}

1:6 - 1:6
```

R recycles vectors of unequal length:

```{r, eval=F}

1:6 * 1:5

```

<img src="images/recycle.png" alt="R" height="350" width="900"/>

<font size="2">\* Modified from <i>Grolemund & Wickham 2017</i></font>

 

```{r,

 echo=F}

1:6 * 1:5

```

```{r}

1:6 + 1:5

```

 

------------------------------------------------------------------------

# Style Matters

<font size="2"><a href="https://google.github.io/styleguide/Rguide.xml">Based on google's R Style Guide</a></font>

## File Names

File names should end in .R and, of course, be self-explanatory:

-   Good: plot_probability_posterior.R
-   Bad: plot.R

## Object Names

Variables and functions:

-   Lowercase
-   Use an underscore
-   Generally, names for variables and verbs for functions
-   Make names concise and meaningful (not always easy)
-   Avoid using names of existing functions or variables

```{r, eval=F}

  - Good: day_one: day_1, average_weight(),
  
  - Bad: dayone, day1, first.day_of_month, mean <- function(x) sum(x), c <- 10
```

 

## Syntax

### Spaces

-   Use spaces around operators and for arguments within a function
-   Always put a space after a comma, and never before (as in normal English)
-   Place a space before the left parenthesis, except in a function call

```{r, eval=F}

  - Good: 
          a <- rnorm(n = 10, sd = 10, mean = 1)
          tab.prior <- table(df[df$dias < 0, "campaign.id"])
          total <- sum(x[, 1])
          total <- sum(x[1, ])
          if (debug)
          mean(1:10)
          
  - Bad: 
         a<-rnorm(n=10,sd=10,mean=1)
         tab.prior <- table(df[df$days.from.opt<0, "campaign.id"])  # needs space around '<'
         tab.prior <- table(df[df$days.from.opt < 0,"campaign.id"])  # Needs space after comma
         tab.prior<- table(df[df$days.from.opt < 0, "campaign.id"])  # Needs space before <-
         tab.prior<-table(df[df$days.from.opt < 0, "campaign.id"])  # Needs space around <-
         total <- sum(x[,1])  # Needs space before comma  
         if(debug) # Needs space before parenthesis
         mean (1:10) # Extra space after function name

```

 

### Brackets

-   Opening brace should never go on its own line
-   Closing brace should always go on its own line
-   You may omit braces when a block consists of a single statement

```{r eval=F}

  - Good:
              if (is.null(ylim)) {
              ylim <- c(0, 0.06)
            }
                      
            if (is.null(ylim))
              ylim <- c(0, 0.06)
          
  - Bad:
            
         if (is.null(ylim)) ylim <- c(0, 0.06)
                    
         if (is.null(ylim)) {ylim <- c(0, 0.06)} 

         if (is.null(ylim)) {
           ylim <- c(0, 0.06)
           } 
```

 

## Creating Objects

-   Use \<-, not =

```{r, eval = F}

  - GOOD:
         x <- 5 
          
  - BAD:
         x = 5
```

 

## Commenting

-   Comment your code
-   Fully commented lines should start with \# and a space
-   Short comments can be placed after the code preceded by two spaces, #, and then a space

```{r, eval=F}

# Create histogram of frequency of campaigns by pct budget spent.
hist(df$pct.spent,
     breaks = "scott",  # method for choosing number of buckets
     main   = "Histogram: individuals per unit of time",
     xlab   = "Number of individuals",
     ylab   = "Frequency")
```


# R Documentation

Most R resources are well-documented. So **the first source of help you should turn to when writing R code is R's own documentation**. All packages are documented in the same standard way. Getting familiar with the format can simplify things a lot.

## Package Documentation

<img src="images/packagepage.png" alt="R" height="900" width="800" style="border:3px solid gray"/>

 

<font size="5">Reference Manuals</font>

Reference manuals are collections of documentation for all functions of a package (only 1 per package):

-   [dynaSpec manual](https://cloud.r-project.org/web/packages/dynaSpec/dynaSpec.pdf)

-   [baRulho manual](https://cran.r-project.org/web/packages/baRulho/baRulho.pdf)

 

## Function Documentation

All functions (default or from loaded packages) should have documentation following a standard format:

```{r, eval=F}
?mean

help("mean")

```

<img src="images/documentation.png" alt="R" height="700" width="800" style="border:3px solid gray"/>  

This documentation can also be displayed in RStudio by pressing `F1` when the cursor is on the function name.

 

If you don't remember the function name, try `apropos()`:

```{r}
apropos("mean")

```

 

## Vignettes

Vignettes are illustrative documents or case studies detailing the usage of a package (optional, there can be several per package).

Vignettes can be called directly from R:

```{r}
vgn <- browseVignettes() 
```

```{r, eval = F}
vignette()
```

They should also appear on the package page on CRAN.

 

## Demonstrations

Packages can also include extended code demonstrations ("demos"). To list the demos of a package, run `demo("package name")`:

```{r, eval=F}
demo(package="stats")

# call demo directly
demo("nlm")

```

 

::: {.alert .alert-info}

# Exercise 3

 

-   What does the function `cut()` do?

-   What is the purpose of the `breaks` argument in `cut()`?

-   Execute the first 4 lines of code from the examples provided in the documentation of `cut()`.

-   How many vignettes does the package warbleR have?
:::

 

---

# References {.unnumbered .unlisted}

-   [Advanced R, H Wickham](http://adv-r.had.co.nz/Data-structures.html)
-   [Google's R Style Guide](https://google.github.io/styleguide/Rguide.xml)\
-   Hands-On Programming with R (Grolemund, 2014)

---

# Session Information {.unnumbered .unlisted}

```{r session info, echo=F}

sessionInfo()

```