[
  {
    "objectID": "r_basics.html",
    "href": "r_basics.html",
    "title": "R basics",
    "section": "",
    "text": "Get familiar with the basic blocks used in R programming\nKnow the main sources of standardized documentation in R\nMost functions are vectorized:\nCode\n1:6 * 1:6\n* Modified from Grolemund & Wickham 2017\n[1]  1  4  9 16 25 36\nCode\n1:6 - 1:6\n\n\n[1] 0 0 0 0 0 0\nR recycles vectors of unequal length:\nCode\n1:6 * 1:5\n* Modified from Grolemund & Wickham 2017\n```{r,\necho=F}\n1:6 * 1:5\n:::"
  },
  {
    "objectID": "r_basics.html#atomic-vectors",
    "href": "r_basics.html#atomic-vectors",
    "title": "R basics",
    "section": "4.1 Atomic vectors",
    "text": "4.1 Atomic vectors\nTypes of atomic vectors:\n\nLogical (boolean)\nInteger\nNumeric (double)\nCharacters\nFactors\n\nVectors are constructed using the c() function:\n\n\nCode\n\nx &lt;- 1\nx1 &lt;- c(1)\n\nall.equal(x, x1)\n## [1] TRUE\n\nclass(x)\n## [1] \"numeric\"\n\ny &lt;- \"something\"\n\nclass(y)\n## [1] \"character\"\n\nz &lt;- TRUE\n\nclass(z)\n## [1] \"logical\"\n\nq &lt;- factor(1)\n\nclass(q)\n## [1] \"factor\"\n\n\n \nVectors can only contain elements of the same type. Different types of elements will be coerced to the most flexible type:\n\n\nCode\n\nv &lt;- c(10, 11, 12, 13)\n\nclass(v)\n## [1] \"numeric\"\n\ntypeof(v)\n## [1] \"double\"\n\ny &lt;- c(\"a\", \"b\")\n\nclass(y)\n## [1] \"character\"\n\n\nx &lt;- c(1,2,3, \"a\")\n\nx\n## [1] \"1\" \"2\" \"3\" \"a\"\n\nclass(x)\n## [1] \"character\"\n\n\n \nMissing values are specified with NA, which is a logical vector of length 1. NA will always be coerced to the correct type if used within c():\n\n\nCode\n\nv &lt;- c(10, 11, 12, 13, NA)\n\nclass(v)\n## [1] \"numeric\"\n\nv &lt;- c(\"a\", \"b\", NA)\n\nclass(v)\n## [1] \"character\""
  },
  {
    "objectID": "r_basics.html#lists",
    "href": "r_basics.html#lists",
    "title": "R basics",
    "section": "4.2 Lists",
    "text": "4.2 Lists\nCan contain objects of different classes and sizes. Lists are constructed with list():\n\n\nCode\nl &lt;- list(\"a\", 1, FALSE)\n\nl\n\n\n[[1]]\n[1] \"a\"\n\n[[2]]\n[1] 1\n\n[[3]]\n[1] FALSE\n\n\nCode\nclass(l)\n\n\n[1] \"list\"\n\n\nCode\nstr(l)\n\n\nList of 3\n $ : chr \"a\"\n $ : num 1\n $ : logi FALSE\n\n\nThey can actually be seen as bins where any other type of object can be put:\n\n\nCode\nl &lt;- list(c(\"a\", \"b\"), c(1, 2, 3, 4), c(FALSE, TRUE, FALSE))\n\nstr(l)\n\n\nList of 3\n $ : chr [1:2] \"a\" \"b\"\n $ : num [1:4] 1 2 3 4\n $ : logi [1:3] FALSE TRUE FALSE\n\n\nCode\nl2 &lt;- list(l, l)\n\nstr(l2)\n\n\nList of 2\n $ :List of 3\n  ..$ : chr [1:2] \"a\" \"b\"\n  ..$ : num [1:4] 1 2 3 4\n  ..$ : logi [1:3] FALSE TRUE FALSE\n $ :List of 3\n  ..$ : chr [1:2] \"a\" \"b\"\n  ..$ : num [1:4] 1 2 3 4\n  ..$ : logi [1:3] FALSE TRUE FALSE"
  },
  {
    "objectID": "r_basics.html#naming-elements",
    "href": "r_basics.html#naming-elements",
    "title": "R basics",
    "section": "4.3 Naming elements",
    "text": "4.3 Naming elements\nVectors can be named in three ways:\n\nWhen creating it: x &lt;- c(a = 1, b = 2, c = 3).\nWhen modifying an existing vector in place: x &lt;- 1:3; names(x) &lt;- c(\"a\", \"b\", \"c\") Or: x &lt;- 1:3; names(x)[[1]] &lt;- c(\"a\")\nCreating a modified copy of a vector: x &lt;- setNames(1:3, c(\"a\", \"b\", \"c\"))\n\n\n\nCode\ny &lt;- c(a = 1, 2, 3)\n\nnames(y)\n\n\n[1] \"a\" \"\"  \"\" \n\n\nCode\nv &lt;- c(1, 2, 3)\n\nnames(v) &lt;- c('a')\n\nnames(v)\n\n\n[1] \"a\" NA  NA \n\n\nCode\nz &lt;- setNames(1:3, c(\"a\", \"b\", \"c\"))\n\nnames(z)\n\n\n[1] \"a\" \"b\" \"c\""
  },
  {
    "objectID": "r_basics.html#factors",
    "href": "r_basics.html#factors",
    "title": "R basics",
    "section": "4.4 Factors",
    "text": "4.4 Factors\nAttributes are used to define factors. A factor is a vector that can only contain predefined values and is used to store categorical data.\nFactors are constructed on integer vectors using two attributes:\n\nclass “factor”: makes them behave differently from normal character vectors\nlevels: define the set of allowed values\n\n\n\nCode\nx &lt;- factor(c(\"a\", \"b\", \"b\", \"a\"))\nx\n\n\n[1] a b b a\nLevels: a b\n\n\nCode\nlevels(x)\n\n\n[1] \"a\" \"b\"\n\n\nCode\nstr(x)\n\n\n Factor w/ 2 levels \"a\",\"b\": 1 2 2 1\n\n\n \nFactors look like character vectors, but they are actually integers:\n\n\nCode\nx &lt;- factor(c(\"a\", \"b\", \"b\", \"a\"))\n\nc(x)\n\n\n[1] a b b a\nLevels: a b"
  },
  {
    "objectID": "r_basics.html#matrices",
    "href": "r_basics.html#matrices",
    "title": "R basics",
    "section": "4.5 Matrices",
    "text": "4.5 Matrices\nAll elements are of the same type:\n\n\nCode\nm &lt;- matrix(c(1, 2, 3, 11, 12, 13), nrow = 2)\n\ndim(m)\n\n\n[1] 2 3\n\n\nCode\nm\n\n\n     [,1] [,2] [,3]\n[1,]    1    3   12\n[2,]    2   11   13\n\n\nCode\nclass(m)\n\n\n[1] \"matrix\" \"array\" \n\n\nCode\nm &lt;- matrix(c(1, 2, 3, 11, 12, \"13\"), nrow = 2)\nm\n\n\n     [,1] [,2] [,3]\n[1,] \"1\"  \"3\"  \"12\"\n[2,] \"2\"  \"11\" \"13\""
  },
  {
    "objectID": "r_basics.html#data-frames",
    "href": "r_basics.html#data-frames",
    "title": "R basics",
    "section": "4.6 Data frames",
    "text": "4.6 Data frames\nSpecial case of lists. Can contain elements of different types:\n\n\nCode\nm &lt;-\n  data.frame(\n    ID = c(\"a\", \"b\", \"c\", \"d\", \"e\"),\n    size = c(1, 2, 3, 4, 5),\n    observed = c(FALSE, TRUE, FALSE, FALSE, FALSE)\n  )\n\ndim(m)\n\n\n[1] 5 3\n\n\nCode\nm\n\n\n\n\n\n\nID\nsize\nobserved\n\n\n\n\na\n1\nFALSE\n\n\nb\n2\nTRUE\n\n\nc\n3\nFALSE\n\n\nd\n4\nFALSE\n\n\ne\n5\nFALSE\n\n\n\n\n\n\nCode\nclass(m)\n\n\n[1] \"data.frame\"\n\n\nCode\nis.data.frame(m)\n\n\n[1] TRUE\n\n\nCode\nis.list(m)\n\n\n[1] TRUE\n\n\nCode\nstr(m)\n\n\n'data.frame':   5 obs. of  3 variables:\n $ ID      : chr  \"a\" \"b\" \"c\" \"d\" ...\n $ size    : num  1 2 3 4 5\n $ observed: logi  FALSE TRUE FALSE FALSE FALSE\n\n\n \nBut vectors must have the same length:\n\n\nCode\nm &lt;-\n  data.frame(\n    ID = c(\"a\", \"b\", \"c\", \"d\", \"e\"),\n    size = c(1\n\n, 2, 3, 4, 5, 6),\n    observed = c(FALSE, TRUE, FALSE, FALSE, FALSE)\n  )\n\n\nError in data.frame(ID = c(\"a\", \"b\", \"c\", \"d\", \"e\"), size = c(1, 2, 3, : arguments imply differing number of rows: 5, 6"
  },
  {
    "objectID": "r_basics.html#most-used-operators",
    "href": "r_basics.html#most-used-operators",
    "title": "R basics",
    "section": "8.1 Most used operators",
    "text": "8.1 Most used operators\nArithmetic operators:\n\n\n\n\n\n\nOperator\nDescription\n\n\n\n\n+\naddition\n\n\n-\nsubtraction\n\n\n*\nmultiplication\n\n\n/\ndivision\n\n\n^ or **\nexponentiation\n\n\n\n\n\n\n\n\n\n\nCode\n1 - 2\n\n\n[1] -1\n\n\nCode\n1 + 2\n\n\n[1] 3\n\n\nCode\n2 ^ 2\n\n\n[1] 4\n\n\nCode\n2 ** 2\n\n\n[1] 4\n\n\nCode\n2:3 %in% 2:4\n\n\n[1] TRUE TRUE\n\n\n \nLogical operators:\n\n\n\n\nOperator\nDescription\n\n\n\n\n&lt;\nless than\n\n\n&lt;=\nless than or equal to\n\n\n&gt;\ngreater than\n\n\n&gt;=\ngreater than or equal to\n\n\n==\nexactly equal to\n\n\n!=\nnot equal to\n\n\n!x\nnot x\n\n\nx &#124; y\nx OR y\n\n\nx & y\nx AND y\n\n\nx %in% y\nmatch\n\n\n\n\n\n\n\n\nCode\n1 &lt; 2 \n\n\n[1] TRUE\n\n\nCode\n1 &gt; 2 \n\n\n[1] FALSE\n\n\nCode\n1 &lt;= 2 \n\n\n[1] TRUE\n\n\nCode\n1 == 2\n\n\n[1] FALSE\n\n\nCode\n1 != 2\n\n\n[1] TRUE\n\n\nCode\n1 &gt; 2 \n\n\n[1] FALSE\n\n\nCode\n5 %in% 1:6\n\n\n[1] TRUE\n\n\nCode\n5 %in% 1:4\n\n\n[1] FALSE"
  },
  {
    "objectID": "r_basics.html#file-names",
    "href": "r_basics.html#file-names",
    "title": "R basics",
    "section": "10.1 File Names",
    "text": "10.1 File Names\nFile names should end in .R and, of course, be self-explanatory:\n\nGood: plot_probability_posterior.R\nBad: plot.R"
  },
  {
    "objectID": "r_basics.html#object-names",
    "href": "r_basics.html#object-names",
    "title": "R basics",
    "section": "10.2 Object Names",
    "text": "10.2 Object Names\nVariables and functions:\n\nLowercase\nUse an underscore\nGenerally, names for variables and verbs for functions\nMake names concise and meaningful (not always easy)\nAvoid using names of existing functions or variables\n\n\n\nCode\n  - Good: day_one: day_1, average_weight(),\n  \n  - Bad: dayone, day1, first.day_of_month, mean &lt;- function(x) sum(x), c &lt;- 10"
  },
  {
    "objectID": "r_basics.html#syntax",
    "href": "r_basics.html#syntax",
    "title": "R basics",
    "section": "10.3 Syntax",
    "text": "10.3 Syntax\n\n10.3.1 Spaces\n\nUse spaces around operators and for arguments within a function\nAlways put a space after a comma, and never before (as in normal English)\nPlace a space before the left parenthesis, except in a function call\n\n\n\nCode\n  - Good: \n          a &lt;- rnorm(n = 10, sd = 10, mean = 1)\n          tab.prior &lt;- table(df[df$dias &lt; 0, \"campaign.id\"])\n          total &lt;- sum(x[, 1])\n          total &lt;- sum(x[1, ])\n          if (debug)\n          mean(1:10)\n          \n  - Bad: \n         a&lt;-rnorm(n=10,sd=10,mean=1)\n         tab.prior &lt;- table(df[df$days.from.opt&lt;0, \"campaign.id\"])  # needs space around '&lt;'\n         tab.prior &lt;- table(df[df$days.from.opt &lt; 0,\"campaign.id\"])  # Needs space after comma\n         tab.prior&lt;- table(df[df$days.from.opt &lt; 0, \"campaign.id\"])  # Needs space before &lt;-\n         tab.prior&lt;-table(df[df$days.from.opt &lt; 0, \"campaign.id\"])  # Needs space around &lt;-\n         total &lt;- sum(x[,1])  # Needs space before comma  \n         if(debug) # Needs space before parenthesis\n         mean (1:10) # Extra space after function name\n\n\n \n\n\n10.3.2 Brackets\n\nOpening brace should never go on its own line\nClosing brace should always go on its own line\nYou may omit braces when a block consists of a single statement\n\n\n\nCode\n  - Good:\n              if (is.null(ylim)) {\n              ylim &lt;- c(0, 0.06)\n            }\n                      \n            if (is.null(ylim))\n              ylim &lt;- c(0, 0.06)\n          \n  - Bad:\n            \n         if (is.null(ylim)) ylim &lt;- c(0, 0.06)\n                    \n         if (is.null(ylim)) {ylim &lt;- c(0, 0.06)} \n\n         if (is.null(ylim)) {\n           ylim &lt;- c(0, 0.06)\n           }"
  },
  {
    "objectID": "r_basics.html#creating-objects",
    "href": "r_basics.html#creating-objects",
    "title": "R basics",
    "section": "10.4 Creating Objects",
    "text": "10.4 Creating Objects\n\nUse &lt;-, not =\n\n\n\nCode\n  - GOOD:\n         x &lt;- 5 \n          \n  - BAD:\n         x = 5"
  },
  {
    "objectID": "r_basics.html#commenting",
    "href": "r_basics.html#commenting",
    "title": "R basics",
    "section": "10.5 Commenting",
    "text": "10.5 Commenting\n\nComment your code\nFully commented lines should start with # and a space\nShort comments can be placed after the code preceded by two spaces, #, and then a space\n\n\n\nCode\n# Create histogram of frequency of campaigns by pct budget spent.\nhist(df$pct.spent,\n     breaks = \"scott\",  # method for choosing number of buckets\n     main   = \"Histogram: individuals per unit of time\",\n     xlab   = \"Number of individuals\",\n     ylab   = \"Frequency\")"
  },
  {
    "objectID": "r_basics.html#package-documentation",
    "href": "r_basics.html#package-documentation",
    "title": "R basics",
    "section": "11.1 Package Documentation",
    "text": "11.1 Package Documentation\n\n \nReference Manuals\nReference manuals are collections of documentation for all functions of a package (only 1 per package):\n\ndynaSpec manual\nbaRulho manual"
  },
  {
    "objectID": "r_basics.html#function-documentation",
    "href": "r_basics.html#function-documentation",
    "title": "R basics",
    "section": "11.2 Function Documentation",
    "text": "11.2 Function Documentation\nAll functions (default or from loaded packages) should have documentation following a standard format:\n\n\nCode\n?mean\n\nhelp(\"mean\")\n\n\n  \nThis documentation can also be displayed in RStudio by pressing F1 when the cursor is on the function name.\n \nIf you don’t remember the function name, try apropos():\n\n\nCode\napropos(\"mean\")\n\n\n [1] \".colMeans\"     \".rowMeans\"     \"colMeans\"      \"kmeans\"       \n [5] \"mean\"          \"mean.Date\"     \"mean.default\"  \"mean.difftime\"\n [9] \"mean.POSIXct\"  \"mean.POSIXlt\"  \"rowMeans\"      \"weighted.mean\""
  },
  {
    "objectID": "r_basics.html#vignettes",
    "href": "r_basics.html#vignettes",
    "title": "R basics",
    "section": "11.3 Vignettes",
    "text": "11.3 Vignettes\nVignettes are illustrative documents or case studies detailing the usage of a package (optional, there can be several per package).\nVignettes can be called directly from R:\n\n\nCode\nvgn &lt;- browseVignettes() \n\n\n\n\nCode\nvignette()\n\n\nThey should also appear on the package page on CRAN."
  },
  {
    "objectID": "r_basics.html#demonstrations",
    "href": "r_basics.html#demonstrations",
    "title": "R basics",
    "section": "11.4 Demonstrations",
    "text": "11.4 Demonstrations\nPackages can also include extended code demonstrations (“demos”). To list the demos of a package, run demo(\"package name\"):\n\n\nCode\ndemo(package=\"stats\")\n\n# call demo directly\ndemo(\"nlm\")"
  },
  {
    "objectID": "r_intro.html",
    "href": "r_intro.html",
    "title": "Basic elements of the R language",
    "section": "",
    "text": "To understand the basic blocks used in R programming\nTo become familiar with the main sources of standardized documentation in R"
  },
  {
    "objectID": "r_intro.html#section",
    "href": "r_intro.html#section",
    "title": "Basic elements of the R language",
    "section": "2.1  ",
    "text": "2.1"
  },
  {
    "objectID": "r_intro.html#objects-containing-data",
    "href": "r_intro.html#objects-containing-data",
    "title": "Basic elements of the R language",
    "section": "3.1 Objects containing data",
    "text": "3.1 Objects containing data\nThe basic data structure in R is the vector. With this all other object classes are built. To understand classes it is useful to think about the number of dimensions (1, 2 or more) and types of data they can contain: homogeneous (a single element type) or heterogeneous (or multiple element types).\n\n\n\n\n\nflowchart LR\n    classDef largeText font-size:18px, padding:15px;\n\n    D(Data objects) --&gt; D1(1 dimension)\n    D --&gt; D2(2 dimensions)\n    D1 --&gt; V(Vector)\n    D1 --&gt; L(List)\n    D2 --&gt; M(Matrix)\n    D2 --&gt;  DF(Data Frame)\n\n    style D fill:#40498E66, stroke:#000, stroke-width:2px, color:#FFF, width:180px\n    style D1 fill:#348AA666, stroke:#000, stroke-width:2px, color:#FFF, width:140px\n    style D2 fill:#348AA666, stroke:#000, stroke-width:2px, color:#FFF, width:140px\n    style DF fill:#49C1AD66, stroke:#000, stroke-width:2px, color:#000\n    style V fill:#49C1AD66, stroke:#000, stroke-width:2px, color:#000\n    style M fill:#49C1AD66, stroke:#000, stroke-width:2px, color:#000\n    style L fill:#49C1AD66, stroke:#000, stroke-width:2px, color:#000\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHomogeneous\nHeterogeneous\n\n\n\n\n1d\nAtomic vector\nList\n\n\n2d\nMatrix\nData frame\n\n\nnd\nArray\n\n\n\n\n\n\n\n\n3.1.1 1 dimension objects\nThere are two basic types of vectors: atomic vectors and lists.\nThey have three common properties:\n\nType, typeof() (class/mode).\nLength, length() (number of elements)\nAttributes, attributes() (metadata)\n\nThey differ in the types of their elements: all elements of an atomic vector must be of the same type, while the elements of a list can have different types.\n\n3.1.1.1 Atomic vectors\nTypes of atomic vectors:\n\nLogical (Boolean)\nInteger\nNumeric (double)\nCharacters\nFactors\n\nVectors are constructed with the c() function, they can be numeric:\n\n\nCode\nx &lt;- 1\nx1 &lt;- c(1)\n\nall.equal(x, x1)\n\n\n[1] TRUE\n\n\nCode\nclass(x)\n\n\n[1] \"numeric\"\n\n\nCharacters:\n\n\nCode\ny &lt;- \"something\"\n\nclass(y)\n\n\n[1] \"character\"\n\n\nLogical:\n\n\nCode\nz &lt;- TRUE\n\nclass(z)\n\n\n[1] \"logical\"\n\n\nOr factor:\n\n\nCode\nq &lt;- factor(1)\n\nclass(q)\n\n\n[1] \"factor\"\n\n\nTherefore, the individual numbers or strings are actually vectors of length one:\n\n\nCode\nclass(1)\n\n\n[1] \"numeric\"\n\n\nCode\nclass(\"a\")\n\n\n[1] \"character\"\n\n\nVectors can only contain elements of the same type. Different types of elements will be forced to the most flexible type:\n\n\nCode\nx &lt;- c(1, 2, \"a\")\n\nx\n\n\n[1] \"1\" \"2\" \"a\"\n\n\nCode\nclass(x)\n\n\n[1] \"character\"\n\n\nMissing values are specified with NA, which is a logical vector of length 1. NA will always be interpreted to the correct type if used inside c():\n\n\nCode\nv &lt;- c(10, 11, NA)\n\nclass(v)\n\n\n[1] \"numeric\"\n\n\nCode\nv &lt;- c(\"a\", \"b\", NA)\n\nclass(v)\n\n\n[1] \"character\"\n\n\n\n\n\n3.1.1.2 Factors\nVectors with factors are very similar to character vectors. However, a factor can only contain predefined values, known as levels. Attributes are used to define the levels of the factor.\nFactors are built on integer vectors using two attributes:\n\n“factor” class: makes them behave differently from normal character vectors.\nlevels: defines the set of allowed values\n\n\n\nCode\nx &lt;- factor(c(\"a\", \"b\", \"b\", \"a\"))\nx\n\n\n[1] a b b a\nLevels: a b\n\n\nCode\nlevels(x)\n\n\n[1] \"a\" \"b\"\n\n\nCode\nstr(x)\n\n\n Factor w/ 2 levels \"a\",\"b\": 1 2 2 1\n\n\nThe factors look like character vectors, but are actually integers:\n\n\nCode\nx &lt;- factor(c(\"a\", \"b\", \"b\", \"a\"))\n\nc(x)\n\n\n[1] a b b a\nLevels: a b\n\n\n\n\n3.1.1.3 Lists\nCan contain objects of different classes and sizes. Lists are constructed with list():\n\n\nCode\nl &lt;- list(\"a\", 1, FALSE)\n\nl\n\n\n[[1]]\n[1] \"a\"\n\n[[2]]\n[1] 1\n\n[[3]]\n[1] FALSE\n\n\nCode\nclass(l)\n\n\n[1] \"list\"\n\n\nCode\nstr(l)\n\n\nList of 3\n $ : chr \"a\"\n $ : num 1\n $ : logi FALSE\n\n\nIn fact, they can be seen as drawers where you can put any other type of object:\n\n\nCode\nl &lt;- list(c(\"a\", \"b\"), \n          c(1, 2, 3, 4), \n          c(FALSE, TRUE, FALSE))\n\nl\n\n\n[[1]]\n[1] \"a\" \"b\"\n\n[[2]]\n[1] 1 2 3 4\n\n[[3]]\n[1] FALSE  TRUE FALSE\n\n\nCode\nstr(l)\n\n\nList of 3\n $ : chr [1:2] \"a\" \"b\"\n $ : num [1:4] 1 2 3 4\n $ : logi [1:3] FALSE TRUE FALSE\n\n\n\n\n\n3.1.2 2-dimensional objects\n\n3.1.2.1 Matrices\nAll elements are of the same type:\n\n\nCode\nm &lt;- matrix(c(1, 2, 3, 11, 12, 13), nrow = 2)\n\ndim(m)\n\n\n[1] 2 3\n\n\nCode\nm\n\n\n     [,1] [,2] [,3]\n[1,]    1    3   12\n[2,]    2   11   13\n\n\nCode\nclass(m)\n\n\n[1] \"matrix\" \"array\" \n\n\nCode\nm &lt;- matrix(c(1, 2, 3, 11, 12, \"13\"), nrow = 2)\nm\n\n\n     [,1] [,2] [,3]\n[1,] \"1\"  \"3\"  \"12\"\n[2,] \"2\"  \"11\" \"13\"\n\n\n\n\n3.1.2.2 Data Frames\nSpecial case of lists. It can contain elements of different types:\n\n\nCode\nm &lt;-\n  data.frame(\n    ID = c(\"a\", \"b\", \"c\", \"d\", \"e\"),\n    size = c(1, 2, 3, 4, 5),\n    observed = c(FALSE, TRUE, FALSE, FALSE, FALSE)\n  )\n\ndim(m)\n\n\n[1] 5 3\n\n\nCode\nm\n\n\n\n\n\n\nID\nsize\nobserved\n\n\n\n\na\n1\nFALSE\n\n\nb\n2\nTRUE\n\n\nc\n3\nFALSE\n\n\nd\n4\nFALSE\n\n\ne\n5\nFALSE\n\n\n\n\n\n\nCode\nclass(m)\n\n\n[1] \"data.frame\"\n\n\nCode\nis.data.frame(m)\n\n\n[1] TRUE\n\n\nCode\nis.list(m)\n\n\n[1] TRUE\n\n\nCode\nstr(m)\n\n\n'data.frame':   5 obs. of  3 variables:\n $ ID      : chr  \"a\" \"b\" \"c\" \"d\" ...\n $ size    : num  1 2 3 4 5\n $ observed: logi  FALSE TRUE FALSE FALSE FALSE\n\n\nBut the vectors must have the same length:\n\n\nCode\nm &lt;-\n  data.frame(\n    ID = c(\"a\", \"b\", \"c\", \"d\", \"e\"),\n    size = c(1, 2, 3, 4, 5, 6),\n    observed = c(FALSE, TRUE, FALSE, FALSE, FALSE)\n  )\n\n\nError in data.frame(ID = c(\"a\", \"b\", \"c\", \"d\", \"e\"), size = c(1, 2, 3, : arguments imply differing number of rows: 5, 6\n\n\n \n\n\n\n3.1.3 Exercise 1\n\nCreate a numeric vector with 8 elements containing positive and negative numbers.\nCreate a character vector with the names of the provinces of Costa Rica.\nAdd to the above point vector an NA\nCreate a numeric matrix with 3 columns and 3 rows\nCreate a character array with 4 columns and 3 rows\nWhat type of object is ‘iris’ and what are its dimensions (hint: iris is an object available by default in your environment)?\nCreate a data frame with a numeric column, a character column and a factor column."
  },
  {
    "objectID": "r_intro.html#functions-objects-that-perform-tasks",
    "href": "r_intro.html#functions-objects-that-perform-tasks",
    "title": "Basic elements of the R language",
    "section": "3.2 Functions: objects that perform tasks",
    "text": "3.2 Functions: objects that perform tasks\nAll functions are created with the function() function and follow the same structure:\n\n* Modified from Grolemund 2014  \n\n3.2.1 Integrated functions\n\n3.2.1.1 Basic functions\nR comes with many functions that you can use to do sophisticated tasks:\n\n\nCode\n# built in functions\nbi &lt;- builtins(internal = FALSE)\n\nlength(bi)\n\n\n[1] 1388\n\n\nSome functions come by default with R basic. New functions can be loaded as part of additional packages or even created by the user.\n\n\n\n\n\nflowchart LR\n    classDef largeText font-size:18px, padding:15px;\n\n    F(Functions) --&gt; BF(Integraded functions)\n    BF --&gt; OP(Operators)\n    BF --&gt; BA(Basic functions)\n    F --&gt; PF(Packages)\n    F --&gt; UF(User defined functions)\n\n    class R,D,D1,D2,F largeText;\n\n    style F fill:#357BA266, stroke:#000, stroke-width:2px, color:#FFF, width:120px\n    style BF fill:#A0DFB966, stroke:#000, stroke-width:2px, color:#000\n    style BA fill:#DEF5E566, stroke:#000, stroke-width:2px, color:#000\n    style OP fill:#DEF5E566, stroke:#000, stroke-width:2px, color:#000    \n    style PF fill:#A0DFB966, stroke:#000, stroke-width:2px, color:#000000\n    style UF fill:#A0DFB966, stroke:#000, stroke-width:2px, color:#000\n\n\n\n\n\n\n\n\n\n3.2.1.2 Operators\nOperators are functions:\n\n\nCode\n1 + 1\n\n\n[1] 2\n\n\nCode\n'+'(1, 1)\n\n\n[1] 2\n\n\nCode\n2 * 3\n\n\n[1] 6\n\n\nCode\n'*'(2, 3)\n\n\n[1] 6\n\n\n\n3.2.1.2.1 Most used operators\nArithmetic operators:\n\n\n\n\n\n\nOperator\nDescription\n\n\n\n\n+\nsum\n\n\n-\nsubtraction\n\n\n*\nmultiplication\n\n\n/\ndivision\n\n\n^ or **\nexponential\n\n\n\n\n\n\n\n\n\n\nCode\n1 - 2\n\n\n[1] -1\n\n\nCode\n1 + 2\n\n\n[1] 3\n\n\nCode\n2 ^ 2\n\n\n[1] 4\n\n\nCode\n2 ** 2\n\n\n[1] 4\n\n\nCode\n2:3 %in% 2:4\n\n\n[1] TRUE TRUE\n\n\nLogical operators:\n\n\n\nOperator\nDescription\n\n\n\n\n&lt;\nlower than\n\n\n&lt;=\nlower than or equal to\n\n\n&gt;\nhigher than\n\n\n&gt;=\nhigher than or equal to\n\n\n==\nexactly the same\n\n\n!=\ndifferent than\n\n\n!x\nIs not x\n\n\nx | y\nx O y\n\n\nx & y\nx Y y\n\n\nx %in% y\ncorrespondence\n\n\n\n\n\nCode\n1 &lt; 2 \n\n\n[1] TRUE\n\n\nCode\n1 &gt; 2 \n\n\n[1] FALSE\n\n\nCode\n1 &lt;= 2 \n\n\n[1] TRUE\n\n\nCode\n1 == 2\n\n\n[1] FALSE\n\n\nCode\n1 != 2\n\n\n[1] TRUE\n\n\nCode\n1 &gt; 2 \n\n\n[1] FALSE\n\n\nCode\n5 %in% 1:6\n\n\n[1] TRUE\n\n\nCode\n5 %in% 1:4\n\n\n[1] FALSE\n\n\n \n\n\n\n\n3.2.2 Vectorization\nMost functions are vectorized:\n\n\nCode\n1:6 * 1:6\n\n\n\n* Modified from Grolemund & Wickham 2017\n \n\n\n[1]  1  4  9 16 25 36\n\n\n\n\nCode\n1:6 - 1:6\n\n\n[1] 0 0 0 0 0 0\n\n\nR recycles vectors of unequal length:\n\n\nCode\n1:6 * 1:5\n\n\n\n* Modified from Grolemund & Wickham 2017\n\n \n\n3.2.3 Additional package functions\nThese are functions that are included in additional packages that can be installed and loaded into R. To be used the package must be installed and loaded, e.g. to use the corTest function of the “psych” package we must first install. The packages are installed from the CRAN (Comprehensive R Archive Network) server with the install.packages() function:\n\n\nCode\ninstall.packages(\"psych\")\n\n\n… and load the package:\n\n\nCode\nlibrary(psych)\n\n\nOnce ‘psych’ is installed and loaded, we can call the corTest function:\n\n\nCode\ncorTest(iris$Sepal.Length, iris$Sepal.Width)\n\n\nCall:corTest(x = iris$Sepal.Length, y = iris$Sepal.Width)\nCorrelation matrix \n[1] -0.12\nSample Size \n[1] 150\nThese are the unadjusted probability values.\n  The probability values  adjusted for multiple tests are in the p.adj object. \n[1] 0.15\n\n To see confidence intervals of the correlations, print with the short=FALSE option\n\n\nThe use of external packages is the most useful feature of R since it allows to make use of an almost infinite number of specialized functions in different tasks as well as in very diverse fields of science and industry.\nWe can explore the packages available for R at the CRAN website (click on the “packages” link).\n\n\n3.2.4 Exercise 2\n\nSearch for a package you are interested in on CRAN.\nInstall the package and upload it\nRun the example code of one of its functions"
  },
  {
    "objectID": "r_intro.html#object-manipulation",
    "href": "r_intro.html#object-manipulation",
    "title": "Basic elements of the R language",
    "section": "3.3 Object manipulation",
    "text": "3.3 Object manipulation"
  },
  {
    "objectID": "r_intro.html#extracting-subsets-using-indexing",
    "href": "r_intro.html#extracting-subsets-using-indexing",
    "title": "Basic elements of the R language",
    "section": "3.4 Extracting subsets using indexing",
    "text": "3.4 Extracting subsets using indexing\nElements within objects can be called by indexing. To subset a vector simply call the position of the object using square brackets:\n\n\nCode\nx &lt;- c(1, 3, 4, 10, 15, 20, 50, 1, 6)\n\nx[1]\n\n\n[1] 1\n\n\nCode\nx[2]\n\n\n[1] 3\n\n\nCode\nx[2:3]\n\n\n[1] 3 4\n\n\nCode\nx[c(1,3)]\n\n\n[1] 1 4\n\n\n \nThe elements can be removed in the same way:\n\n\nCode\nx[-1]\n\n\n[1]  3  4 10 15 20 50  1  6\n\n\nCode\nx[-c(1,3)]\n\n\n[1]  3 10 15 20 50  1  6\n\n\n \nArrays and data frames require 2 indices [row, column]:\n\n\nCode\nm &lt;- matrix(c(1, 2, 3, 11, 12, 13), nrow = 2)\n\nm[1, ]\n\n\n[1]  1  3 12\n\n\nCode\nm[, 1]\n\n\n[1] 1 2\n\n\nCode\nm[1, 1]\n\n\n[1] 1\n\n\nCode\nm[-1, ]\n\n\n[1]  2 11 13\n\n\nCode\nm[, -1]\n\n\n     [,1] [,2]\n[1,]    3   12\n[2,]   11   13\n\n\nCode\nm[-1, -1]\n\n\n[1] 11 13\n\n\nCode\ndf &lt;- data.frame(\n  provincia = c(\"San José\", \"Guanacaste\", \"Guanacaste\"), \n  canton = c(\"Montes de Oca\", \"Nicoya\", \"Liberia\"), \n    distrito = c(\"San Rafael\", \"Nosara\", \"Nacascolo\")\n  )\n\ndf\n\n\n\n\n\n\nprovincia\ncanton\ndistrito\n\n\n\n\nSan José\nMontes de Oca\nSan Rafael\n\n\nGuanacaste\nNicoya\nNosara\n\n\nGuanacaste\nLiberia\nNacascolo\n\n\n\n\n\n\nCode\ndf[1, ]\n\n\n\n\n\n\nprovincia\ncanton\ndistrito\n\n\n\n\nSan José\nMontes de Oca\nSan Rafael\n\n\n\n\n\n\nCode\ndf[, 1]\n\n\n[1] \"San José\"   \"Guanacaste\" \"Guanacaste\"\n\n\nCode\ndf[1, 1]\n\n\n[1] \"San José\"\n\n\nCode\ndf[-1, ]\n\n\n\n\n\n\n\nprovincia\ncanton\ndistrito\n\n\n\n\n2\nGuanacaste\nNicoya\nNosara\n\n\n3\nGuanacaste\nLiberia\nNacascolo\n\n\n\n\n\n\nCode\ndf[, -1]\n\n\n\n\n\n\ncanton\ndistrito\n\n\n\n\nMontes de Oca\nSan Rafael\n\n\nNicoya\nNosara\n\n\nLiberia\nNacascolo\n\n\n\n\n\n\nCode\ndf[-1, -1]\n\n\n\n\n\n\n\ncanton\ndistrito\n\n\n\n\n2\nNicoya\nNosara\n\n\n3\nLiberia\nNacascolo\n\n\n\n\n\n\nCode\ndf[,\"provincia\"]\n\n\n[1] \"San José\"   \"Guanacaste\" \"Guanacaste\"\n\n\nCode\ndf[,c(\"provincia\", \"canton\")]\n\n\n\n\n\n\nprovincia\ncanton\n\n\n\n\nSan José\nMontes de Oca\n\n\nGuanacaste\nNicoya\n\n\nGuanacaste\nLiberia\n\n\n\n\n\n\n \nLists require 1 index between double square brackets [[index]]:\n\n\nCode\nl &lt;- list(c(\"a\", \"b\"),\n          c(1, 2, 3),\n          c(FALSE, TRUE, FALSE, FALSE))\n\nl[[1]]\n\n\n[1] \"a\" \"b\"\n\n\nCode\nl[[3]]\n\n\n[1] FALSE  TRUE FALSE FALSE\n\n\n \nElements within lists can also be subsets in the same code string:\n\n\nCode\nl[[1]][1:2]\n\n\n[1] \"a\" \"b\"\n\n\nCode\nl[[3]][2]\n\n\n[1] TRUE"
  },
  {
    "objectID": "r_intro.html#explore-objects",
    "href": "r_intro.html#explore-objects",
    "title": "Basic elements of the R language",
    "section": "3.5 Explore objects",
    "text": "3.5 Explore objects\nThe following basic R functions (default) can help us to explore the structure of objects:\n\n\nCode\nstr(df)\n\n\n'data.frame':   3 obs. of  3 variables:\n $ provincia: chr  \"San José\" \"Guanacaste\" \"Guanacaste\"\n $ canton   : chr  \"Montes de Oca\" \"Nicoya\" \"Liberia\"\n $ distrito : chr  \"San Rafael\" \"Nosara\" \"Nacascolo\"\n\n\nCode\nnames(df)\n\n\n[1] \"provincia\" \"canton\"    \"distrito\" \n\n\nCode\ndim(df)\n\n\n[1] 3 3\n\n\nCode\nnrow(df)\n\n\n[1] 3\n\n\nCode\nncol(df)\n\n\n[1] 3\n\n\nCode\nhead(df)\n\n\n\n\n\n\nprovincia\ncanton\ndistrito\n\n\n\n\nSan José\nMontes de Oca\nSan Rafael\n\n\nGuanacaste\nNicoya\nNosara\n\n\nGuanacaste\nLiberia\nNacascolo\n\n\n\n\n\n\nCode\ntail(df)\n\n\n\n\n\n\nprovincia\ncanton\ndistrito\n\n\n\n\nSan José\nMontes de Oca\nSan Rafael\n\n\nGuanacaste\nNicoya\nNosara\n\n\nGuanacaste\nLiberia\nNacascolo\n\n\n\n\n\n\nCode\ntable(df$provincia)\n\n\n\nGuanacaste   San José \n         2          1 \n\n\nCode\nclass(df)\n\n\n[1] \"data.frame\"\n\n\n\n\nCode\nView(df)"
  },
  {
    "objectID": "r_intro.html#exercise-3",
    "href": "r_intro.html#exercise-3",
    "title": "Basic elements of the R language",
    "section": "3.6 Exercise 3",
    "text": "3.6 Exercise 3\n\nUse the example data iris to create a subset of data with only the observations of the species setosa.\nNow create a subset of data containing the observations of both setosa and versicolor.\nAlso with iris create a subset of data with the observations for which iris$Sepal.length is greater than 6\nHow many observations have a sepal length greater than 6?"
  },
  {
    "objectID": "r_intro.html#file-names",
    "href": "r_intro.html#file-names",
    "title": "Basic elements of the R language",
    "section": "4.1 File names",
    "text": "4.1 File names\nFile names must end in .R and, of course, be self-explanatory:\n\nGood: graph_posterior_probability.R\nBad: graf.R"
  },
  {
    "objectID": "r_intro.html#object-names",
    "href": "r_intro.html#object-names",
    "title": "Basic elements of the R language",
    "section": "4.2 Object names",
    "text": "4.2 Object names\nVariables and functions:\n\nLowercase\nUse an underscore\nIn general, names for variables and verbs for functions.\nKeep names concise and meaningful (not always easy).\nAvoid using names of existing functions of variables\n\n\n\nCode\n  - Bien: dia_uno: dia_1, peso_promedio(),\n  \n  - Mal: diauno, dia1, primer.dia_delmes"
  },
  {
    "objectID": "r_intro.html#syntax",
    "href": "r_intro.html#syntax",
    "title": "Basic elements of the R language",
    "section": "4.3 Syntax",
    "text": "4.3 Syntax\n\n4.3.1 Spaces\n\nUse spaces around operators and for arguments within a function.\nAlways put a space after a comma, and never before (as in normal English).\nPlace a space before the left parenthesis, except in a function call.\n\n\n\nCode\n  - Bien: \n          a &lt;- rnorm(n = 10, sd = 10, mean = 1)\n          total &lt;- sum(x[1, ])\n\n  - Mal: \n         a&lt;-rnorm(n=10,sd=10,mean=1) \n         total &lt;- sum(x[,1])  \n\n\n \n\n4.3.1.1 Brackets\n\nThe opening key should never go on its own line.\nThe closing brace must always be on its own line.\nYou can omit braces when a block consists of only one statement\n\n\n\nCode\n  - Bien:\n              if (is.null(ylim)) {\n              ylim &lt;- c(0, 0.06)\n            }\n                      \n            if (is.null(ylim))\n              ylim &lt;- c(0, 0.06)\n          \n  - Mal:\n            \n         if (is.null(ylim)) ylim &lt;- c(0, 0.06)\n                    \n         if (is.null(ylim)) {ylim &lt;- c(0, 0.06)} \n\n         if (is.null(ylim)) {\n           ylim &lt;- c(0, 0.06)\n           } \n\n\n \n\n\n4.3.1.2 Create objects\n\nUse &lt;-, instead of =\n\n\n\nCode\n  - GOOD:\n         x &lt;- 5 \n          \n  - BAD:\n         x = 5\n\n\n \n\n\n4.3.1.3 Suggestions to add comments\n\nComment your code\nEntire commented lines should begin with # and a space.\nShort comments can be placed after the code preceded by two spaces, #, and then a space.\n\n\n\nCode\n# Create histogram of frequency of campaigns by pct budget spent.\nhist(df$pct.spent,\n     breaks = \"scott\",  # method for choosing number of buckets\n     main   = \"Histogram: individuals per unit of time\",\n     xlab   = \"Individual count\",\n     ylab   = \"Frequency\")"
  },
  {
    "objectID": "r_intro.html#package-documentation",
    "href": "r_intro.html#package-documentation",
    "title": "Basic elements of the R language",
    "section": "5.1 Package documentation",
    "text": "5.1 Package documentation"
  },
  {
    "objectID": "r_intro.html#reference-manuals",
    "href": "r_intro.html#reference-manuals",
    "title": "Basic elements of the R language",
    "section": "5.2 Reference manuals",
    "text": "5.2 Reference manuals\nReference manuals are collections of documentation for all the functions of a package (only 1 per package):\n\ndynaSpec manual\nbaRulho manual"
  },
  {
    "objectID": "r_intro.html#documentation-of-functions",
    "href": "r_intro.html#documentation-of-functions",
    "title": "Basic elements of the R language",
    "section": "5.3 Documentation of functions",
    "text": "5.3 Documentation of functions\nAll functions (default or loaded packages) must have documentation that follows a standard format:\n\n\nCode\n?mean\n\nhelp(\"mean\")\n\n\n\nThis documentation can also be displayed in Rstudio by pressing F1 when the cursor is on the function name.\nIf you do not remember the function name try apropos():\n\n\nCode\napropos(\"mean\")\n\n\n [1] \".colMeans\"      \".rowMeans\"      \"circadian.mean\" \"circular.mean\" \n [5] \"colMeans\"       \"geometric.mean\" \"harmonic.mean\"  \"kmeans\"        \n [9] \"mean\"           \"mean.Date\"      \"mean.default\"   \"mean.difftime\" \n[13] \"mean.POSIXct\"   \"mean.POSIXlt\"   \"rowMeans\"       \"weighted.mean\" \n[17] \"winsor.mean\"    \"winsor.means\""
  },
  {
    "objectID": "r_intro.html#vignettes-vignettes",
    "href": "r_intro.html#vignettes-vignettes",
    "title": "Basic elements of the R language",
    "section": "5.4 Vignettes (vignettes)",
    "text": "5.4 Vignettes (vignettes)\nVignettes are illustrative documents or case studies detailing the use of a package (optional, can be several per package).\nVignettes can be called directly from R:\n\n\nCode\nvgn &lt;- browseVignettes() \n\n\n\n\nCode\nvignette()\n\n\nTambién deberían aparecer en la página del paquete en CRAN."
  },
  {
    "objectID": "r_intro.html#exercise-4",
    "href": "r_intro.html#exercise-4",
    "title": "Basic elements of the R language",
    "section": "5.5 Exercise 4",
    "text": "5.5 Exercise 4\n\nWhat does the cut() function do?\nWhat is the breaks argument used for in cut()?\nRun the first 4 lines of code from the examples provided in the cut() documentation.\nHow many bullets does the warbleR package have?"
  },
  {
    "objectID": "r_intro.html#session-info",
    "href": "r_intro.html#session-info",
    "title": "Basic elements of the R language",
    "section": "Session info",
    "text": "Session info\n\n\nR version 4.3.2 (2023-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 22.04.2 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.10.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.10.0\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\ntime zone: America/Costa_Rica\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] psych_2.3.12\n\nloaded via a namespace (and not attached):\n [1] vctrs_0.6.5       nlme_3.1-155      svglite_2.1.3     cli_3.6.3        \n [5] knitr_1.48        rlang_1.1.4       xfun_0.47         stringi_1.8.4    \n [9] highr_0.11        jsonlite_1.8.8    glue_1.7.0        colorspace_2.1-1 \n[13] htmltools_0.5.8.1 scales_1.3.0      rmarkdown_2.28    grid_4.3.2       \n[17] evaluate_0.24.0   munsell_0.5.1     kableExtra_1.4.0  fastmap_1.2.0    \n[21] yaml_2.3.10       lifecycle_1.0.4   stringr_1.5.1     compiler_4.3.2   \n[25] htmlwidgets_1.6.4 rstudioapi_0.16.0 lattice_0.20-45   systemfonts_1.1.0\n[29] digest_0.6.37     viridisLite_0.4.2 R6_2.5.1          parallel_4.3.2   \n[33] mnormt_2.1.1      magrittr_2.0.3    tools_4.3.2       xml2_1.3.6"
  },
  {
    "objectID": "instructor.html",
    "href": "instructor.html",
    "title": "OTS TBCP 2024",
    "section": "",
    "text": "Marcelo Araya-Salas\n\n\n\n\n\nI am just another behavioral ecologists that ended up doing a lot of coding just to get data analysis done. So now I’m deeply involved in the development of computational tools for (non-genetic) biological data analysis, mostly related to animal behavior and bioacoustics. I am the developer and maintainer of the R packages warbleR and Rraven that provide functions to streamline high-throughput acoustic analysis of animal sounds, aiming to simplify the use of R for bioacoustic research. More recently I released the R packages baRulho, to quantify acoustic signal transmission and degradation, ohun, to optimize automatic detection and PhenotypeSpace for quantifying multidimensional trait spaces. Also check out the new R package sketchy for organizing research compendiums. New functions as well as other more elaborated analyses are detailed in my blog Bioacoustics in R."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "OTS TBCP 2024",
    "section": "",
    "text": "Stats Workshop\n\n\nOrganization For Tropical Studies\n\n\n\nMarcelo Araya-Salas, PhD\n\n\n\nSeptember, 2024\n\n\n\n\nTraditionally, statistical models have been taught as disconnected tools with no clear relationship between them. However, most of those common statistical models are just special cases of linear models. Hence, learning them as such can simplify things substantially. The course will focus on linear regression as the main tool for statistical inference. Students will be introduced to the basic elements of a linear regression model, its interpretation, as well as hands-on experience on building those models in R.\n\nObjetives\n\nUse R as the main tool for stats\nUnderstand statistical inference through a single modelling tool (broad sense linear models)\nGet familiar with building linear models\nExtend linear models to different data structures"
  },
  {
    "objectID": "course_prep.html",
    "href": "course_prep.html",
    "title": "OTS TBCP 2024",
    "section": "",
    "text": "Install R on the computer you will use during the course (https://cran.r-project.org/). I assume that you already have it installed, but try to update it if you have an R version &lt; 4.0.0. You can find which R version you have by running this in the R console:\n\n\n\nCode\nversion$version.string\n\n\n\nInstall the RStudio interface (https://www.rstudio.com/products/rstudio/download/, choose the free version). Optional but advised.\nOpen RStudio and select the tab “Tools” then “Global Options” (last option). Select the “Code” option, then select the box for “Soft-wrap R source files”.\nAlso in Rstudio: Select the “Pane Layout” option and move “Source” to the top left pane and “Console” to the top right pane. For those of you unfamiliar with RStudio, the source is your script, where you save code in a physical file (usually .R script) and the console prints the output of the code you run from the source. You can write code in the console, but it will not be saved in a physical file. This layout allocates more screen space to the most useful panes. Hit “Apply” and “Ok”.\nNow in the R console in Rstudio run the following code to install the packages that will be used during the workshop:\n\n\n\nCode\ninstall.packages(c(\"ggplot2\",\n                 \"lme4\",\n                 \"MASS\",\n                 \"viridis\",\n                 \"lmerTest\",\n                 \"car\",\n                 \"sjstats\",\n                 \"sjPlot\"))\n\n\n \n\nA few tips to ensure you will take full advantage of the course:\n \n\nSet aside a physical space, hopefully as isolated as possible from external stimuli\nUse headphones/earphones to avoid distractions from echoes or external noises\nMake sure you have everything you need before the start of the class\nBe ready a few minutes before the start of the class\nTry to focus as much as possible on the course, close other programs or unnecessary internet browser tabs (i.e. instagram, twitter, etc). This will also make your computer more efficient (less likely to slow down)\nComment your code"
  },
  {
    "objectID": "program.html",
    "href": "program.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "program.html#day-1",
    "href": "program.html#day-1",
    "title": "",
    "section": "1 Day 1",
    "text": "1 Day 1\n\n\n1.1 Refresh basic R concepts Tutorial\n\nObject types in R\nSubsetting\nStyle matters\nR documentation\n\n\n\n1.2 Additional materials\n\n1.2.1 Readings\n\nBaker, M. (2016). Reproducibility crisis. nature, 533(26), 353-66.\n\n\n\n1.2.2 Videos\n\nReproducibility crisis\nReproducibility and open science\n\n\n\n1.2.3 Optional\n\nAlston, J. M., & Rick, J. A. (2021). A beginner’s guide to conducting reproducible research. Bulletin of the Ecological Society of America, 102(2), 1-14.\nCulina, A., van den Berg, I., Evans, S., & Sánchez-Tójar, A. (2020). Low availability of code in ecology: A call for urgent action. PLoS Biology, 18(7), e3000763."
  },
  {
    "objectID": "program.html#day-2",
    "href": "program.html#day-2",
    "title": "",
    "section": "2 Day 2",
    "text": "2 Day 2\n\n\n2.1 Research compendiums Tutorial\n\nFolder structure formats\nR packages as templates for compendiums\nR Packages for Compendium Generation\n\n\n\n2.2 Coding and reproducible research Tutorial\n\nFree software and code\nWhy R?\nTools for reproducible programming\n\n\n\n2.3 Practice\n\nOn a scientific journal of your preference pick up 5 open access papers (or just 5 papers if you have access)\nSkim each paper to check if they have attempted to make it reproducible and which research components have been shared (like data or code). If there are not open research papers in the 10 you pick up keep looking until you find one.\nTry to access the supplementary materials containing the shared materials\nIf they shared the code, take a look at how well commented it is\n\n\n\n2.4 Intro to git/gihub Tutorial\n\nGit for version control\nSetting up a git project\nVersion control and collaboration with github\n\n\n\n2.5 Additional materials\n\n2.5.1 Readings\n\nVuorre, M., & Curley, J. P. (2018). Curating research assets: A tutorial on the Git version control system. Advances in Methods and Practices in Psychological Science, 1(2), 219-236.\n\n\n\n2.5.2 Videos\n\nWhat is git?\nWhat is version control?\nGit vs github\n\n\n\n2.5.3 Optional\n\nBryan, J. (2018). Excuse me, do you have a moment to talk about version control?. The American Statistician, 72(1), 20-27."
  },
  {
    "objectID": "program.html#day-3",
    "href": "program.html#day-3",
    "title": "",
    "section": "3 Day 3",
    "text": "3 Day 3\n\n\n3.1 Dynamic reports Tutorial\n\nSharing analysis with dynamic reports\nRmarkdown and quarto formats\nMarkdown syntax\nRpubs\n\n\n\n3.2 Reproducible taxonomic information Tutorial\n\nReproducibility taxonomic information\nTaxize package\nCurating taxonomic information\n\n\n\n3.3 Additional materials\n\n3.3.1 Readings\n\nChamberlain, S. A., & Szöcs, E. (2013). taxize: taxonomic search and retrieval in R. F1000Research, 2.\nVink, C. J., Paquin, P., & Cruickshank, R. H. (2012). Taxonomy and irreproducible biological science. BioScience, 62(5), 451-452.\n\n\n\n3.3.2 Optional\n\nInce, D. C., Hatton, L., & Graham-Cumming, J. (2012). The case for open computer programs. Nature, 482(7386), 485-488.\nFidler, F., Chee, Y. E., Wintle, B. C., Burgman, M. A., McCarthy, M. A., & Gordon, A. (2017). Metaresearch for evaluating reproducibility in ecology and evolution. BioScience, 67(3), 282-289."
  }
]